1.应用生命周期
    onLaunch	当uni-app 初始化完成时触发（全局只触发一次）
    onShow	当 uni-app 启动，或从后台进入前台显示
    onHide	当 uni-app 从前台进入后台
    onError	当 uni-app 报错时触发
    onUniNViewMessage	对 nvue 页面发送的数据进行监听，可参考 nvue 向 vue 通讯
    onUnhandledRejection	对未处理的 Promise 拒绝事件监听函数（2.8.1+）
    onPageNotFound	页面不存在监听函数
    onThemeChange	监听系统主题变化

2.页面生命周期
    onLoad	监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参），参考示例		
    onShow	监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面		
    onReady	监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发		
    onHide	监听页面隐藏		
    onUnload	监听页面卸载		
    onResize	监听窗口尺寸变化	App、微信小程序	
    onPullDownRefresh	监听用户下拉动作，一般用于下拉刷新，参考示例		
    onReachBottom	页面上拉触底事件的处理函数		
    onTabItemTap	点击 tab 时触发，参数为Object，具体见下方注意事项	微信小程序、百度小程序、H5、App（自定义组件模式）	
    onShareAppMessage	用户点击右上角分享	微信小程序、百度小程序、字节跳动小程序、支付宝小程序	
    onPageScroll	监听页面滚动，参数为Object		
    onNavigationBarButtonTap	监听原生标题栏按钮点击事件，参数为Object	5+ App、H5	
    onBackPress	监听页面返回，返回 event = {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack ；详细说明及使用：onBackPress 详解	App、H5	
    onNavigationBarSearchInputChanged	监听原生标题栏搜索输入框输入内容变化事件	App、H5	1.6.0
    onNavigationBarSearchInputConfirmed	监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。	App、H5	1.6.0
    onNavigationBarSearchInputClicked	监听原生标题栏搜索输入框点击事件	App、H5	1.6.0
    onShareTimeline	监听用户点击右上角转发到朋友圈	微信小程序	2.8.1+
    onAddToFavorites	监听用户点击右上角收藏	微信小程序	2.8.1+

3.vue 和 nvue 共享的变量和数据
    1. vuex:
        自HBuilderX 2.2.5起，nvue支持vuex。这是vue官方的状态管理工具。
          注意：
            不支持直接引入store使用，可以使用mapState、mapGetters、mapMutations等辅助方法或者使用this.$store
    2. uni.storage:
        vue和nvue页面可以使用相同的uni.storage存储。这个存储是持久化的。 比如登陆状态可以保存在这里。
        App端还支持plus.sqlite，也是共享通用的。
    3. globalData:
        小程序有globalData机制，这套机制在uni-app里也可以使用，全端通用。 在App.vue文件里定义globalData，如下：
        <script>  
            export default {  
                globalData: {  
                    text: 'text'  
                },  
                onLaunch: function() {  
                    console.log('App Launch')  
                },  
                onShow: function() {  
                    console.log('App Show')  
                },  
                onHide: function() {  
                    console.log('App Hide')  
                }  
            }  
        </script>
        js中操作globalData的方式如下： getApp().globalData.text = 'test'
        如果需要把globalData的数据绑定到页面上，可在页面的onShow声明周期里进行变量重赋值。

4.nvue开发与vue开发的常见区别
    基于原生引擎的渲染，虽然还是前端技术栈，但和web开发肯定是有区别的。

    nvue 页面控制显隐只可以使用v-if不可以使用v-show
    nvue 页面只能使用 flex 布局，不支持其他布局方式。页面开发前，首先想清楚这个页面的纵向内容有什么，哪些是要滚动的，然后每个纵向内容的横轴排布有什么，按 flex 布局设计好界面。
    原生开发没有页面滚动的概念，页面内容高过屏幕高度并不会自动滚动，只有部分组件可滚动（list、waterfall、scroll-view/scroller），要滚得内容需要套在可滚动组件下。这不符合前端开发的习惯，所以在 nvue 编译为 uni-app模式时，给页面外层自动套了一个 scroller，页面内容过高会自动滚动。（组件不会套，页面有recycle-list时也不会套）。后续会提供配置，可以设置不自动套。
    文字内容，必须、只能在<text>组件下。不能在<div>、<view>的text区域里直接写文字。否则即使渲染了，也无法绑定js里的变量。
    只有text标签可以设置字体大小，字体颜色。
    布局不能使用百分比、没有媒体查询。
    nvue 切换横竖屏时可能导致样式出现问题，建议有 nvue 的页面锁定手机方向。
    支持的css有限，不过并不影响布局出你需要的界面，flex还是非常强大的。详见
    不支持背景图。但可以使用image组件和层级来实现类似web中的背景效果。因为原生开发本身也没有web这种背景图概念
    css选择器支持的比较少，只能使用 class 选择器。详见weex的样式文档
    class 进行绑定时只支持数组语法。
    nvue页面没有bounce回弹效果，只有几个列表组件有bounce效果，包括 list、recycle-list、waterfall。
    Android端在一个页面内使用大量圆角边框会造成性能问题，尤其是多个角的样式还不一样的话更耗费性能。应避免这类使用。
    nvue 的各组件在安卓端默认是透明的，如果不设置background-color，可能会导致出现重影的问题。
    在 App.vue 中定义的全局js变量不会在 nvue 页面生效。globalData和vuex是生效的。
    App.vue 中定义的全局css，对nvue和vue页面同时生效。如果全局css中有些css在nvue下不支持，编译时控制台会报警，建议把这些不支持的css包裹在条件编译里，APP-PLUS-NVUE
    不能在 style 中引入字体文件，nvue 中字体图标的使用参考：weex 加载自定义字体。如果是本地字体，可以用plus.io的API转换路径。
    目前不支持在 nvue 页面使用 typescript/ts。
    nvue 页面关闭原生导航栏时，想要模拟状态栏，可以参考：https://ask.dcloud.net.cn/article/35111。但是，仍然强烈建议在nvue页面使用原生导航栏。nvue的渲染速度再快，也没有原生导航栏快。原生排版引擎解析json绘制原生导航栏耗时很少，而解析nvue的js绘制整个页面的耗时要大的多，尤其在新页面进入动画期间，对于复杂页面，没有原生导航栏会在动画期间产生整个屏幕的白屏或闪屏。
    nvue 页面的布局排列方向默认为竖排（column），如需改变布局方向，可以在 manifest.json -> app-plus -> nvue -> flex-direction 节点下修改，仅在 uni-app 模式下生效。详情。
    nvue页面编译为H5、小程序时，会做一件css默认值对齐的工作。因为weex渲染引擎只支持flex，并且默认flex方向是垂直。而H5和小程序端，使用web渲染，默认不是flex，并且设置display:flex后，它的flex方向默认是水平而不是垂直的。所以nvue编译为H5、小程序时，会自动把页面默认布局设为flex、方向为垂直。当然开发者手动设置后会覆盖默认设置。
    下面有些正确和错误的写法示例对比：

    选择器仅支持class 选择器

    /* 错误 */
    #id {}
    .a .b .c {}
    .a > .b {}

    /* 正确 */
    .class {}
    border 不支持简写

    /* 错误 */
    .class {
        border: 1px red solid;
    }

    /* 正确 */
    .class {
        border-width: 1px;
        border-style: solid;
        border-color: red;
    }
    background 不支持简写
    /* 错误 */
    .class {
        background: red;
    }

    /* 正确 */
    .class {
        background-color: red;
    }
    nvue的uni-app编译模式下，App.vue 中的样式，会编译到每个 nvue文件。对于共享样式，如果有不合法属性控制台会给出警告，可以通过条件编译APP-PLUS-NVUE屏蔽 App 中的警告。
    /* 错误 */
    /*  控制台警告：
    WARNING: `border` is not a standard property name (may not be supported)  
    WARNING: `-webkit-transform` is not a standard property name (may not be supported)
    */
    .class {
        border: 1px red solid;
    -webkit-transform: scaleY(.5);
    }

    /* 正确 */
    .class {
        border-width: 1px;
        border-style: solid;
        border-color: red;
    /* #ifndef APP-PLUS-NVUE */
    -webkit-transform: scaleY(.5);
    /* #endif*/
    }

5.